% this scipt loads images generated by scanimage and calcultes the metric
% for all modulated zenical modes
function IMetric_Scanimage_seq_IWS



    hSI = evalin('base','hSI');             % get hSI from the base workspace
    hSICtl = evalin('base','hSICtl');
    flag = evalin('base','flag');
   

%%% set flags

% save results
flag.save = 1;

% set metric
flag.Intensity = 0;
flag.Variance = 0;
flag.DDC = 0;
flag.MeanI = 1;
flag.Imax = 0; 

%%% fit method
% fitfun = 'poly2';
fitfun = 'gauss1';
% fitfun = 'smoothingspline';
% fitfun = 'gauss2';


flag.threshhold_fit = 0.80;


% set PSF for DDC metric if flag enabled 
FOV = 60; % in um 
PSFum = 1; % in um 

%% no further edditing nedded 

%%% determine file path and filenames to load for analysis
 
filepath = hSI.hScan2D.logFilePath;
name = hSI.hScan2D.logFileStem;

     
if hSI.AO.Iteration == 1
    
    N_Amplitude = flag.AO.Zern_Nstep;

else
    
    N_Amplitude = flag.AO.Iteration.N_Amp;
end

if hSI.loopAcqCounter == hSI.acqsPerLoop
    
    AqcCountStart = hSI.loopAcqCounter+1-N_Amplitude;
    AqcCountStop = hSI.loopAcqCounter;
    AqcCountStart_file = hSI.hScan_LinScanner.logFileCounter -N_Amplitude ;
    
else
    
    AqcCountStart = hSI.loopAcqCounter+2-N_Amplitude;
    AqcCountStop = hSI.loopAcqCounter+1;
    AqcCountStart_file = hSI.hScan_LinScanner.logFileCounter -N_Amplitude+1 ;
    
end

Channel = flag.AO.Channel;  

% number of Zernical which can be modulated 
N_Zernical = size(flag.AO.CM_Zern,1);

%load images
[Image] = load_tiff_scanImage_IWS( filepath, name, AqcCountStart_file, Channel, hSI, flag);

%Determine Zernical order and Amplitudes to be analysed 
Zorder = hSI.AO.Zernical_State(AqcCountStop,2);

nf = AqcCountStop;
nk =1;

while Zorder == hSI.AO.Zernical_State(nf,2)
    
   Amplitude(nk) = hSI.AO.Zernical_State(nf,3);
   nf = nf-1;  
   nk = nk+1;
end

% if only one amplitude is modulated 
if all(hSI.AO.Zernical_State(2:end,2))
    
   Amplitude(Amplitude==0) = []; 
end

Amplitude = flip(Amplitude);

pPSFSupportDiameter = PSFum/(FOV/size(Image,2)); %PSF in pixel


%% metric evaluation


if flag.Intensity ==1
    Metric = Intensity_squared_Metric(Image);
    disp('Intensity metric was amplide')
    analysis = 'IntensitySquart';
elseif flag.DDC == 1
    % metric based on normalised DCT shannon entropy 
    lOTFSupportX = size(Image,1) / pPSFSupportDiameter;
    lOTFSupportY = size(Image,2) / pPSFSupportDiameter;
    Metric = DCTS_perSlice(Image,lOTFSupportX,lOTFSupportY);  
    disp('DCC was amplide')
    analysis = 'DDC';
    
elseif flag.MeanI ==1
    
        max_I = max(Image(:));
        min_I = min(Image(:));
    
    thresh = mean(Image(:)) + 2.* std(Image(:)); % use local threshold

    
    if max_I > thresh
        
               Binary_Im = Image > thresh;  %binary image
              [vali, idx_bin] = max(sum(sum(Binary_Im)));
               Bin_mask = repmat(Binary_Im(:,:,idx_bin),1,1,size(Image,3));
               Image = Image.*Bin_mask;
               
              Binary_Im = sum(Binary_Im,3);
              Binary_Im = Binary_Im >= 1;
              figure(2002); imagesc(Binary_Im)
                              
                              

    end
    
    
    

    for pk = 1:size(Image,3)
        
        image_bin = Image(:,:,pk);
        Metric(pk) = mean(mean(image_bin(Binary_Im))); % calculate Metric
        
    end

    Metric = Metric(:)';
%     Metric = Metric+abs(min(Metric(:)))+1;
    analysis = 'Imean';
    
elseif   flag.Variance ==1;
    for kp =1 :size(Image,3)
        ImageVar =Image(:,:,kp);
        Metric(kp) = var(ImageVar(:));
       
    end
    
    analysis= 'Ivar';
elseif    flag.Imax ==1;
    
    Metric = max(max(Image));
    analysis = 'Imax';
else 
    disp('no Metric is defined')
end 

hSI.AO.Zernical_State(AqcCountStart:AqcCountStart+length(Metric)-1,4) = Metric; 
hSI.AO.analysis = analysis;
%% fit Metric values to find maxima

[Zernical_max, max_Metric_val] = fit_Metric_seq_IWS(Zorder, Amplitude', Metric', N_Zernical, fitfun, flag);

if isnan(max_Metric_val)
    
    if hSI.AO.Iteration ==1
        
        Zernical_max =0;
        
    else
    
         Zernical_max = hSI.AO.Zern_vec_Iterations(Zorder,hSI.AO.Iteration -1);
     
    end
    
end

% update hSI for next aquisition
hSI.AO.Zern_vec(Zorder) = Zernical_max;
idx_mod = find(hSI.AO.Zern_vec);
x_vec = [1:length(hSI.AO.Zern_vec)];

try
    
    a = [hSI.AO.Zern_vec_Iterations(:,:) ,  hSI.AO.Zern_vec];
    figure(2000); bar(x_vec, a, 'FaceColor','flat'); 
    xlim([3 max(flag.AO.corr_Zernical)+1]);
    xlabel('Zernik order')
    ylabel('Amplitude')

    figure(3000);
    plot(hSI.loopAcqCounter,max_Metric_val,'b--o')
    hold on
    xlabel('Acquistion count')
    ylabel('max Metric Value')

end

end
